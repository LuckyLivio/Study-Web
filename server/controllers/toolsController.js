// Ë°®ÊÉÖÂåÖÊï∞ÊçÆ
const emojiCategories = {
  'ÂºÄÂøÉ': ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö', 'üòô', 'ü•≤'],
  'ÈöæËøá': ['üò¢', 'üò≠', 'üòø', 'üòæ', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò§', 'üò†', 'üò°', 'ü§¨'],
  'ÊÉäËÆ∂': ['üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü§Ø', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§ê', 'üò¨', 'üôÑ', 'üòë', 'üòê'],
  'Áà±ÂøÉ': ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü'],
  'ÊâãÂäø': ['üëç', 'üëé', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëè', 'üôå', 'ü§≤', 'ü§ù', 'üôè'],
  'Âä®Áâ©': ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•'],
  'È£üÁâ©': ['üçé', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï'],
  'Ê¥ªÂä®': ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä']
};

// Â≠¶‰π†Ë¥¥Â£´Êï∞ÊçÆ
const studyTips = [
  {
    category: 'Êó∂Èó¥ÁÆ°ÁêÜ',
    tips: [
      '‰ΩøÁî®Áï™ËåÑÂ∑•‰ΩúÊ≥ïÔºå25ÂàÜÈíü‰∏ìÊ≥®Â≠¶‰π†Ôºå5ÂàÜÈíü‰ºëÊÅØ',
      'Âà∂ÂÆöÊØèÊó•Â≠¶‰π†ËÆ°ÂàíÔºåËÆæÂÆöÊòéÁ°ÆÁöÑÂ≠¶‰π†ÁõÆÊ†á',
      'Âà©Áî®Á¢éÁâáÊó∂Èó¥Â§ç‰π†ÈáçÁÇπÁü•ËØÜ',
      'ÈÅøÂÖçÂ§ö‰ªªÂä°Â§ÑÁêÜÔºå‰∏ÄÊ¨°Âè™‰∏ìÊ≥®‰∏Ä‰ª∂‰∫ã',
      'ËÆæÂÆöÂ≠¶‰π†Êà™Ê≠¢Êó∂Èó¥ÔºåÈÅøÂÖçÊãñÂª∂Áóá'
    ]
  },
  {
    category: 'ËÆ∞ÂøÜÊäÄÂ∑ß',
    tips: [
      '‰ΩøÁî®ËÆ∞ÂøÜÂÆ´ÊÆøÊ≥ïËÆ∞ÂøÜÂ§çÊùÇ‰ø°ÊÅØ',
      'Âà∂‰ΩúÊÄùÁª¥ÂØºÂõæÊï¥ÁêÜÁü•ËØÜÁªìÊûÑ',
      'ÈááÁî®Èó¥ÈöîÈáçÂ§çÊ≥ïÂ∑©Âõ∫ËÆ∞ÂøÜ',
      'Â∞ÜÊäΩË±°Ê¶ÇÂøµ‰∏éÂÖ∑‰Ωì‰∫ãÁâ©ËÅîÁ≥ª',
      'Áù°ÂâçÂ§ç‰π†ÔºåÂà©Áî®Áù°Áú†Â∑©Âõ∫ËÆ∞ÂøÜ'
    ]
  },
  {
    category: 'Â≠¶‰π†ÁéØÂ¢É',
    tips: [
      '‰øùÊåÅÂ≠¶‰π†ÁéØÂ¢ÉÊï¥Ê¥ÅÊúâÂ∫è',
      'ÈÄâÊã©ÂÆâÈùô„ÄÅÂÖâÁ∫øÂÖÖË∂≥ÁöÑÂ≠¶‰π†Âú∫ÊâÄ',
      'ËøúÁ¶ªÊâãÊú∫Á≠âÂπ≤Êâ∞Ê∫ê',
      'ÂáÜÂ§áÂÖÖË∂≥ÁöÑÂ≠¶‰π†Áî®ÂìÅ',
      'Ëê•ÈÄ†‰∏ìÂ±ûÁöÑÂ≠¶‰π†Ê∞õÂõ¥'
    ]
  },
  {
    category: 'ÂÅ•Â∫∑‰π†ÊÉØ',
    tips: [
      '‰øùËØÅÂÖÖË∂≥ÁöÑÁù°Áú†Êó∂Èó¥',
      'ÂÆöÊúüËøõË°å‰ΩìËÇ≤ÈîªÁÇº',
      '‰øùÊåÅÂùáË°°ÁöÑÈ•ÆÈ£ü',
      'Â≠¶‰π†Èó¥ÈöôÂÅöÁúº‰øùÂÅ•Êìç',
      '‰øùÊåÅËâØÂ•ΩÁöÑÂùêÂßø'
    ]
  },
  {
    category: 'Â≠¶‰π†ÊñπÊ≥ï',
    tips: [
      '‰∏ªÂä®Â≠¶‰π†ÊØîË¢´Âä®Êé•ÂèóÊõ¥ÊúâÊïà',
      'ÂÆöÊúüÊÄªÁªìÂíåÂèçÊÄùÂ≠¶‰π†ÂÜÖÂÆπ',
      '‰∏é‰ªñ‰∫∫ËÆ®ËÆ∫‰∫§ÊµÅÂ≠¶‰π†ÂøÉÂæó',
      'ÁêÜËÆ∫ËÅîÁ≥ªÂÆûÈôÖÔºåÂ§öÂÅöÁªÉ‰π†',
      'Âª∫Á´ãÈîôÈ¢òÊú¨ÔºåÂèçÂ§çÁªÉ‰π†ËñÑÂº±ÁéØËäÇ'
    ]
  }
];

// Âä±ÂøóÂêçË®ÄÊï∞ÊçÆ
const motivationalQuotes = [
  'ÊàêÂäü‰∏çÊòØÁªàÁÇπÔºåÂ§±Ë¥•‰∏çÊòØÊú´Êó•ÔºåÁªßÁª≠ÂâçËøõÁöÑÂãáÊ∞îÊâçÊúÄÂèØË¥µ„ÄÇ',
  'Â≠¶ËÄåÊó∂‰π†‰πãÔºå‰∏ç‰∫¶ËØ¥‰πéÔºü',
  'ÂçÉÈáå‰πãË°åÔºåÂßã‰∫éË∂≥‰∏ã„ÄÇ',
  '‰∏çÁßØË∑¨Ê≠•ÔºåÊó†‰ª•Ëá≥ÂçÉÈáåÔºõ‰∏çÁßØÂ∞èÊµÅÔºåÊó†‰ª•ÊàêÊ±üÊµ∑„ÄÇ',
  'Â§©Ë°åÂÅ•ÔºåÂêõÂ≠ê‰ª•Ëá™Âº∫‰∏çÊÅØ„ÄÇ',
  '‰π¶Â±±ÊúâË∑ØÂã§‰∏∫ÂæÑÔºåÂ≠¶Êµ∑Êó†Ê∂ØËã¶‰ΩúËàü„ÄÇ',
  'ÂÆùÂâëÈîã‰ªéÁ£®Á†∫Âá∫ÔºåÊ¢ÖËä±È¶ôËá™Ëã¶ÂØíÊù•„ÄÇ',
  '‰∏öÁ≤æ‰∫éÂã§ÔºåËçí‰∫éÂ¨âÔºõË°åÊàê‰∫éÊÄùÔºåÊØÅ‰∫éÈöè„ÄÇ',
  'ËØª‰π¶Á†¥‰∏áÂç∑Ôºå‰∏ãÁ¨îÂ¶ÇÊúâÁ•û„ÄÇ',
  'Áü•ËØÜÂ∞±ÊòØÂäõÈáè„ÄÇ',
  'Â≠¶‰π†ÊòØ‰∏ÄÁîüÁöÑ‰∫ã‰∏ö„ÄÇ',
  '‰ªäÂ§©ÁöÑÂä™ÂäõÔºåÊòØÊòéÂ§©ÁöÑÂÆûÂäõ„ÄÇ'
];

// Ëé∑ÂèñË°®ÊÉÖÂåÖ
exports.getEmojis = async (req, res) => {
  try {
    const { category } = req.query;
    
    if (category && emojiCategories[category]) {
      res.json({
        success: true,
        data: {
          category,
          emojis: emojiCategories[category]
        }
      });
    } else {
      res.json({
        success: true,
        data: {
          categories: Object.keys(emojiCategories),
          allEmojis: emojiCategories
        }
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñË°®ÊÉÖÂåÖÂ§±Ë¥•',
      error: error.message
    });
  }
};

// ÈöèÊú∫Ëé∑ÂèñË°®ÊÉÖ
exports.getRandomEmoji = async (req, res) => {
  try {
    const { category } = req.query;
    let emojis = [];
    
    if (category && emojiCategories[category]) {
      emojis = emojiCategories[category];
    } else {
      // Ëé∑ÂèñÊâÄÊúâË°®ÊÉÖ
      emojis = Object.values(emojiCategories).flat();
    }
    
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
    
    res.json({
      success: true,
      data: {
        emoji: randomEmoji,
        category: category || 'ÈöèÊú∫'
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñÈöèÊú∫Ë°®ÊÉÖÂ§±Ë¥•',
      error: error.message
    });
  }
};

// Ëé∑ÂèñÂ≠¶‰π†Ë¥¥Â£´
exports.getStudyTips = async (req, res) => {
  try {
    const { category } = req.query;
    
    if (category) {
      const categoryTips = studyTips.find(item => item.category === category);
      if (categoryTips) {
        res.json({
          success: true,
          data: categoryTips
        });
      } else {
        res.status(404).json({
          success: false,
          message: 'Êú™ÊâæÂà∞ËØ•ÂàÜÁ±ªÁöÑÂ≠¶‰π†Ë¥¥Â£´'
        });
      }
    } else {
      res.json({
        success: true,
        data: {
          categories: studyTips.map(item => item.category),
          allTips: studyTips
        }
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñÂ≠¶‰π†Ë¥¥Â£´Â§±Ë¥•',
      error: error.message
    });
  }
};

// ÈöèÊú∫Ëé∑ÂèñÂ≠¶‰π†Ë¥¥Â£´
exports.getRandomStudyTip = async (req, res) => {
  try {
    const { category } = req.query;
    let tips = [];
    
    if (category) {
      const categoryTips = studyTips.find(item => item.category === category);
      if (categoryTips) {
        tips = categoryTips.tips;
      }
    } else {
      // Ëé∑ÂèñÊâÄÊúâË¥¥Â£´
      tips = studyTips.flatMap(item => item.tips);
    }
    
    if (tips.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Êú™ÊâæÂà∞Â≠¶‰π†Ë¥¥Â£´'
      });
    }
    
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    
    res.json({
      success: true,
      data: {
        tip: randomTip,
        category: category || 'ÈöèÊú∫'
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñÈöèÊú∫Â≠¶‰π†Ë¥¥Â£´Â§±Ë¥•',
      error: error.message
    });
  }
};

// Ëé∑ÂèñÂä±ÂøóÂêçË®Ä
exports.getMotivationalQuote = async (req, res) => {
  try {
    const randomQuote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];
    
    res.json({
      success: true,
      data: {
        quote: randomQuote,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñÂä±ÂøóÂêçË®ÄÂ§±Ë¥•',
      error: error.message
    });
  }
};

// ÁîüÊàêÈöèÊú∫È¢úËâ≤
exports.getRandomColor = async (req, res) => {
  try {
    const { format = 'hex' } = req.query;
    
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    
    let color;
    switch (format) {
      case 'rgb':
        color = `rgb(${r}, ${g}, ${b})`;
        break;
      case 'hsl':
        const h = Math.floor(Math.random() * 360);
        const s = Math.floor(Math.random() * 100);
        const l = Math.floor(Math.random() * 100);
        color = `hsl(${h}, ${s}%, ${l}%)`;
        break;
      default:
        color = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }
    
    res.json({
      success: true,
      data: {
        color,
        format,
        rgb: { r, g, b },
        hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'ÁîüÊàêÈöèÊú∫È¢úËâ≤Â§±Ë¥•',
      error: error.message
    });
  }
};

// Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥‰ø°ÊÅØ
exports.getTimeInfo = async (req, res) => {
  try {
    const now = new Date();
    const timezone = req.query.timezone || 'Asia/Shanghai';
    
    const timeInfo = {
      timestamp: now.getTime(),
      iso: now.toISOString(),
      local: now.toLocaleString('zh-CN', { timeZone: timezone }),
      date: now.toLocaleDateString('zh-CN', { timeZone: timezone }),
      time: now.toLocaleTimeString('zh-CN', { timeZone: timezone }),
      year: now.getFullYear(),
      month: now.getMonth() + 1,
      day: now.getDate(),
      hour: now.getHours(),
      minute: now.getMinutes(),
      second: now.getSeconds(),
      weekday: now.toLocaleDateString('zh-CN', { weekday: 'long', timeZone: timezone }),
      timezone
    };
    
    res.json({
      success: true,
      data: timeInfo
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Ëé∑ÂèñÊó∂Èó¥‰ø°ÊÅØÂ§±Ë¥•',
      error: error.message
    });
  }
};